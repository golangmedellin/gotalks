Introduction to Golang
Medellín
14 Oct 2014

Simón Escobar Benitez
Go entusiast
sescobb27@gmail.com
@sescob27

Camilo Aguilar
Entrepreneur
camilo.aguilar@gmail.com
@c4milo

* What is Go?
- Open source
- Concurrent
- Memory safe
- Garbage Collected
- C-Family language
- Simple
.image gophers.jpg

* Why Go?
Robert Love when asked in Quora about what kind of programming language we
need in the future.

.image whygo.png

* Who is behind Go?
- Robert Pike (Unix / UTF-8)
- Kenneth Thompson (B and C lang/Unix/UTF-8)
- Ian Lance Taylor (GCC)
- Robert Griesemer (Hotspot JVM)
- Russ Cox (Plan9/CSP)
- 512 contributors as of today. For instance, Windows port was entirely
contributed by the Go community.

* Some perspective about contributors
- *Go:* 512
- *Rust:* 697
- *Node.js:* 649
- *Scala:* 248
- *Ruby:* 93
- *Python:* 204

_Source:_ _https://www.openhub.net/_

* Who uses Go?
- Google
- Apple
- Facebook
- Heroku
- Amazon
- New York Times
- Canonical
- Github
- Hailo
- pool.ntp.org
- Shopify
- Somewhat complete list at https://code.google.com/p/go-wiki/wiki/GoUsers

* Go's adoption
.image adoption.png
_Googles_trends_ graph

* Go's main features (1/2)
- Statically compiled but has type-inference
- Explicit coding, no magic, no meta-programming
- Fast compilations (`go build` and you're done)
- Composition over inheritance
- Duck Typing
- Functions are first class citizens
- Closures
- Pointers but not pointer arithmetic

* Go's main features (2/2)
- No exceptions, instead it provides an Error interface and encourages explicit error handling.
- Visibility is given by the case of the first letter of the type, property or function name.
- If you declare something and you don't use it, it won't compile.
- Cyclic dependencies are not allowed, makes the work of the compiler easier but also avoids questionable code design practices.
- Painless cross compilation (ignoring CGO)
- Multi-value returns

* What is not Go?
- It's not a research programming language.
- It is not a pure Object Oriented language nor a Functional one. Although it borrows things from various programming paradigms and languages.
- Probably not the best language for embedded programming of realtime applications. Although some people have used it succesfully for that. Your mileage may vary.
- It is not a scripting language like Javascript, Ruby or Python. But it was designed to feel like it.

* How do I learn Go?
- Read the spec
- Practice, write code.
- Contribute to an opensource project.
- Don't be embarrased to ask questions
- *Forum:* https://groups.google.com/forum/#!forum/golang-nuts
- *IRC:* #go-nuts at *irc.freenode.net*

* How do I install Go?
- *Windows:* Download MSI installer from https://golang.org/dl/. It will put the Go distribution in `C:\Go` and add `C:\Go\bin` to your PATH env variable.
- *OSX:* Download DMG package from https://golang.org/dl/. It will put the Go distribution in `/usr/local/go` and add `/usr/local/go/bin` to your PATH env variable
- *Linux:* Download the archive from https://golang.org/dl/. Create a Go tree in `/usr/local/go`. Add `/usr/local/go/bin` to the PATH environment variable `echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile`.

* What about IDE support?
- *SublimeText2* https://github.com/DisposaBoy/GoSublime
- *Vim:* https://github.com/fatih/vim-go
- *IntelliJ:* https://github.com/go-lang-plugin-org/go-lang-idea-plugin
- *Eclipse:* https://github.com/GoClipse/goclipse

* Demo

* Go resources
- http://roberto.costumero.es/slides/Go2010/manual_go.pdf
- http://codegangsta.gitbooks.io/building-web-apps-with-go
- http://www.golang-book.com/
- https://github.com/astaxie/build-web-application-with-golang/blob/master/en/eBook/preface.md
- http://jan.newmarch.name/go
- http://www.golangbootcamp.com/book
- https://github.com/avelino/awesome-go
- https://gocasts.io
- https://gophercasts.io/
